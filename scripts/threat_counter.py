from web3 import Web3
import json

# Connect to Ganache GUI
ganache_url = "http://127.0.0.1:8545"
w3 = Web3(Web3.HTTPProvider(ganache_url))

# Check if connected
if w3.is_connected():
    print("Connected to Ganache!")
else:
    print("Failed to connect to Ganache. Make sure it's running!")
    exit()

# Set the default account (use Ganache's first pre-funded account)
w3.eth.default_account = w3.eth.accounts[0]

# Replace these with the ABI and Bytecode from Remix
contract_abi_json = """[
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "bytes32",
                "name": "hash",
                "type": "bytes32"
            },
            {
                "indexed": false,
                "internalType": "string",
                "name": "hashInput",
                "type": "string"
            }
        ],
        "name": "ThreatSubmitted",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "bytes32",
                "name": "_salt",
                "type": "bytes32"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "inputs": [],
        "name": "getTotalSubmissions",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "hashInput",
                "type": "string"
            }
        ],
        "name": "submitThreat",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "totalSubmissions",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    }
]"""
contract_abi = json.loads(contract_abi_json)
contract_bytecode = "608060405234801561001057600080fd5b506040516107de3803806107de83398181016040528101906100329190610054565b806002819055505061009e565b60008151905061004e81610087565b92915050565b60006020828403121561006657600080fd5b60006100748482850161003f565b91505092915050565b6000819050919050565b6100908161007d565b811461009b57600080fd5b50565b610731806100ad6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632fe5c36a1461004657806354554d4614610062578063a395401614610080575b600080fd5b610060600480360381019061005b91906102ae565b61009e565b005b61006a610236565b6040516100779190610492565b60405180910390f35b610088610240565b6040516100959190610492565b60405180910390f35b60008151116100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d990610452565b60405180910390fd5b606481511115610127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011e90610472565b60405180910390fd5b60008160025460405160200161013e9291906103e8565b60405160208183030381529060405280519060200120905060008082815260200190815260200160002060009054906101000a900460ff16156101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90610432565b60405180910390fd5b600160008083815260200190815260200160002060006101000a81548160ff02191690831515021790555060018060008282546101f3919061052a565b92505081905550807feac7b3f2149fd0f247053923369577aaacf9e32f51e35453deb3ad4caf4f24ab8360405161022a9190610410565b60405180910390a25050565b6000600154905090565b60015481565b6000610259610254846104d2565b6104ad565b90508281526020810184848401111561027157600080fd5b61027c848285610594565b509392505050565b600082601f83011261029557600080fd5b81356102a5848260208601610246565b91505092915050565b6000602082840312156102c057600080fd5b600082013567ffffffffffffffff8111156102da57600080fd5b6102e684828501610284565b91505092915050565b6103006102fb82610580565b610607565b82525050565b600061031182610503565b61031b818561050e565b935061032b8185602086016105a3565b6103348161066f565b840191505092915050565b600061034a82610503565b610354818561051f565b93506103648185602086016105a3565b80840191505092915050565b600061037d60168361050e565b915061038882610680565b602082019050919050565b60006103a060158361050e565b91506103ab826106a9565b602082019050919050565b60006103c3600e8361050e565b91506103ce826106d2565b602082019050919050565b6103e28161058a565b82525050565b60006103f4828561033f565b915061040082846102ef565b6020820191508190509392505050565b6000602082019050818103600083015261042a8184610306565b905092915050565b6000602082019050818103600083015261044b81610370565b9050919050565b6000602082019050818103600083015261046b81610393565b9050919050565b6000602082019050818103600083015261048b816103b6565b9050919050565b60006020820190506104a760008301846103d9565b92915050565b60006104b76104c8565b90506104c382826105d6565b919050565b6000604051905090565b600067ffffffffffffffff8211156104ed576104ec610640565b5b6104f68261066f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006105358261058a565b91506105408361058a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561057557610574610611565b5b828201905092915050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156105c15780820151818401526020810190506105a6565b838111156105d0576000848401525b50505050565b6105df8261066f565b810181811067ffffffffffffffff821117156105fe576105fd610640565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4861736820616c7265616479207375626d697474656400000000000000000000600082015250565b7f496e7075742063616e6e6f7420626520656d7074790000000000000000000000600082015250565b7f496e70757420746f6f206c6f6e6700000000000000000000000000000000000060008201525056fea2646970667358221220b3c15ab55902edbcc6abf470eec03f51e127b59542d995502ff5f36020763ece64736f6c63430008020033"  

# Create the contract object
ThreatCounter = w3.eth.contract(abi=contract_abi, bytecode=contract_bytecode)

# Deploy the contract with a salt
salt = "0x1111111111111111111111111111111111111111111111111111111111111111"
tx_hash = ThreatCounter.constructor(salt).transact()
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
contract_address = tx_receipt.contractAddress
print(f"Contract deployed at: {contract_address}")

# Create an instance of the deployed contract
contract = w3.eth.contract(address=contract_address, abi=contract_abi)

# Submit a threat
print("Submitting threat: 'samplehash'")
tx_hash = contract.functions.submitThreat("samplehash").transact()
w3.eth.wait_for_transaction_receipt(tx_hash)
print("Threat submitted!")

# Get the total submissions
total_submissions = contract.functions.getTotalSubmissions().call()
print(f"Total submissions: {total_submissions}")

# Listen for the ThreatSubmitted event
event_filter = contract.events.ThreatSubmitted.create_filter(from_block="latest")
print("Listening for ThreatSubmitted events... (submit another threat in Remix to see the event)")
while True:
    for event in event_filter.get_new_entries():
        hash_bytes = event['args']['hash']
        hash_hex = w3.to_hex(hash_bytes)  # Convert bytes to hex string
        print(f"Event detected! Hash: {hash_hex}, HashInput: {event['args']['hashInput']}")